name: 构建并上传项目产物
# 触发条件：默认推送代码到main分支时执行，可根据需求修改分支名
on:
  push:
    branches: [ main ]
  # 可选：允许手动触发工作流
  workflow_dispatch:

jobs:
  build-and-upload:
    # 运行环境：选择最新的Ubuntu系统（稳定且常用）
    runs-on: ubuntu-latest
    steps:
      # 步骤1：拉取GitHub仓库代码
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          # 拉取完整历史记录（如需构建历史版本可保留，否则可设为false提速）
          fetch-depth: 0

      # 步骤2：安装Node.js（pnpm依赖Node环境，指定LTS版本确保兼容性）
      - name: 安装Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          # 缓存npm依赖（可选，提速后续构建）
          cache: 'npm'

      # 步骤3：安装pnpm包管理器
      - name: 安装pnpm
        uses: pnpm/action-setup@v3
        with:
          # 指定pnpm版本（建议与本地开发版本一致，避免兼容性问题）
          version: 9.4.0
          # 缓存pnpm依赖（可选，大幅提速依赖安装）
          run_install: false

      # 步骤4：使用pnpm安装项目依赖
      - name: 安装项目依赖
        run: pnpm install
        # 可选：若依赖安装缓慢，可添加镜像源（如国内环境）
        # env:
        #   PNPM_REGISTRY: https://registry.npmmirror.com

      # 步骤5：执行项目构建命令（需确保package.json中已配置"build"脚本）
      - name: 构建项目
        run: pnpm run build

      # 步骤6：将构建产物上传为Artifact（需指定实际构建输出目录）
      - name: 上传构建产物到Artifact
        uses: actions/upload-artifact@v4
        with:
          # Artifact名称（自定义，方便后续识别）
          name: project-build-output
          # 构建产物目录（需替换为你的项目实际输出目录，如dist、build等）
          path: ./dist
          # 产物保留时间（默认90天，可根据需求调整，单位：天）
          retention-days: 30